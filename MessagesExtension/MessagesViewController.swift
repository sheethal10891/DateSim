//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by asastry on 10/21/16.
//  Copyright Â© 2016 asastry. All rights reserved.
//

import UIKit
import Messages

class User: EVObject {
    var id: Int = 0
    var name: String = ""
    var friends: [User]? = []
}

class MessagesViewController: MSMessagesAppViewController {
    
    
    static var SECS_IN_DAY = 120
    
    var localPlayerRegID = -1
    
    var playerNames:[String]
    
    // The entire state of the game needs to be one object
    // so that we can JSON encode and send it
    var gameData:GameData
    
    required init?(coder aDecoder: NSCoder) {
        playerNames = []
        playerNames.append("Sugar Daddy")
        playerNames.append("Hot Mama")
        playerNames.append("Baby Cakes")
        playerNames.append("Mother Clucker")
        
        gameData = GameData()
        super.init(coder: aDecoder)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        print("*** Entered viewDidLoad()")
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
        print("*** Entered didReceiveMemoryWarning()")
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        print("*** Entered willBecomeActive()")
        
        super.willBecomeActive(with: conversation)
        
        // TESt code: 
        // let json:String = "{\"id\": 24, \"name\": \"Bob Jefferson\", \"friends\": [{\"id\": 29, \"name\": \"Jen Jackson\"}]}"
        // let user = User(json: json)
        // let jen = user.friends?[1]

        // Check if the game is initialized yet and set the game state from the active message
        initializeGameState(with: conversation)
        
        if (allParticipantsRegistered(conversation)) {
            // This will show the full game
            presentViewController(for: conversation, with: .expanded)
        } else {
            // This will show the join screen
            presentViewController(for: conversation, with: .compact)
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        
        print("*** Entered didResignActive()")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        
        print("*** Entered didReceive()")
        
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        
        print("*** Entered didStartSending()")
        
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        
        print("*** Entered didCancelSending()")
        
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        // guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        // Present the view controller appropriate for the conversation and presentation style.
        // presentViewController(for: conversation, with: presentationStyle)

        
        print("*** Entered willTransition()")
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        print("*** Entered didTransition()")
    }
    
    public func registerLocalUser() {
        let userID = activeConversation?.localParticipantIdentifier.uuidString
        print("*** Registering local user: \(userID!)")
        
        let playerIndex = getRegIndex(for: userID!)
        
        if (playerIndex == -1) {
            
            
            // Register all the test users for the hackathon demo
            for playerOrder in 0...3 {
                var defaultPlayerInfo = PlayerInfo()
                defaultPlayerInfo.setInfo(playerOrder)
                // let playerIndex = gameData.playerMap!.count
                defaultPlayerInfo.name = playerNames[playerOrder]
                
                defaultPlayerInfo.money = 100
                
                
                // Create starting blob in the player object array
                gameData.setValue(defaultPlayerInfo, forKey: "player\(playerOrder)")
                
                // Register user on the user Map
                gameData.playerMap!.append(userID!)
                
                //Set another dummy Value because I can't get two uuid's in the bledy Simulator!
                // defaultPlayerInfo = PlayerInfo()
                // defaultPlayerInfo.name = playerNames[playerOrder+1]
                // defaultPlayerInfo.money = 100
                // gameData.setValue(defaultPlayerInfo, forKey: "player\(playerIndex+1)")
            }
            
            // Registration is done - send an update.
            composeMessage()
        } else {
            // Do nothing
            print("*** RegisterLocalUser: player is already registered.")
        }
        
    }
    
    public func getLocalPlayerRegIndex()-> Int{
    let userID = activeConversation?.localParticipantIdentifier.uuidString
        return getRegIndex(for: userID!)
    }
    

    
    public func getRegIndex(for playerLocalID:String) -> Int {
        var result:Int?
        if (gameData.playerMap != nil) {
            result = gameData.playerMap!.index(of: playerLocalID)
        }
        
        if (result == nil) {
            result = -1
        }
        return result!
    }
    public func setInviting(to playerName: String){
        //yeah! Sugar Daddy can send message to Hot Mama only!
        //gameData.player1?.inbox[0] = true
        //gameData.player0?.sent[1] = true
        
        //to show the has invited part, Setting invite from player2 to player 1. Because both the users on the Simulator are player1!
        gameData.player0?.inbox[1] = true
        gameData.player1?.sent[0] = true
        
        composeMessage()
    }
    
    public func setStartWorking(){
        let playerInfo = gameData.value(forKey: "player"+String(localPlayerRegID)) as! PlayerInfo
        playerInfo.activity = Activity()
        playerInfo.activity?.startTime = NSDate().timeIntervalSince1970
        composeMessage()
    }
    
    public func challengePLayer(player playerNumber:String){
        gameData.player3?.hearts-=1
        gameData.player3?.activity = nil
        gameData.player0?.hearts+=1
        composeMessage("lalala")
    }
    
    public func setOnADate(with player:String){
        gameData.player0?.inbox[1] = false
        gameData.player1?.sent[0] = false
        gameData.player0?.activity = Activity()
        gameData.player0?.activity?.setActivity(with: 1)
        gameData.player1?.activity = Activity()
        gameData.player1?.activity?.setActivity(with: 0)
        gameData.player0?.money-=20
        composeMessage()
    }
    
    
    private func initializeGameState(with conversation:MSConversation) {
    
        if (conversation.selectedMessage == nil) {
            // If the game state is uninitialized - initialize it
            if (gameData.playerMap == nil) {
                gameData.playerMap = []
            }
        } else {
            // Game state should already be initialized
            getGameData(from: conversation.selectedMessage!)
        }
        
    }
    
    
    private func composeMessage(_ message:String = "") {
        
        var jsonData:String = ""
        
        if let conversation = activeConversation {
            jsonData = gameData.toJsonString()
            print("*** composeMessage: \(jsonData)")
            
            var components = URLComponents()
            components.queryItems = [URLQueryItem]()
            components.queryItems?.append(URLQueryItem(name: "gameData", value:jsonData))
            let layout = MSMessageTemplateLayout()
            layout.image = nil
            if(message==""){
                layout.caption = "$\(conversation.localParticipantIdentifier.uuidString) just played their move!"
            }
            else {
                layout.caption = "$\(conversation.localParticipantIdentifier.uuidString) just challenged Mother Clucker and Won!"
            }
            let message = MSMessage()
            message.layout = layout
            message.url = components.url!
            
            conversation.insert(message, completionHandler: { (error: Error?) in
                print(error)
            })
        }
        dismiss()
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        // Determine the controller to present.
        var controller: UIViewController
        if presentationStyle == .compact {
            print("*** Compact Screen - Calling User Registration")
            controller = instantiateUserRegController()
        } else {
            print("*** Expanded Screen - Calling PlayerInfoController")
            localPlayerRegID = getRegIndex(for: (conversation.localParticipantIdentifier.uuidString))
            controller =  instantiatePlayerInfoController()
        }
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        // Embed the new controller.
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    
    private func getGameData(from message:MSMessage) -> Void {
        
        let messageURL = message.url
        print("*** getGameData: URL \(messageURL)")
        
        let urlComponents = NSURLComponents(url: messageURL!, resolvingAgainstBaseURL: false)
        let queryItems = urlComponents?.queryItems
       
        for queryItem in queryItems! {
            guard queryItem.value != nil else { continue }
            if queryItem.name == "gameData" {
                self.gameData = GameData(json:queryItem.value)
            }
        }
        
    }
    
    private func instantiateUserRegController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: UserRegistrationViewController.storyboardIdentifier) as? UserRegistrationViewController else { fatalError("Unable to instantiate an UserRegistrationViewController from the storyboard") }
        
        controller.msgController = self
        
        return controller
    }
    
    
    private func instantiatePlayerInfoController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: PlayerInfoTableViewController.storyboardIdentifier) as? PlayerInfoTableViewController else { fatalError("Unable to instantiate an UserRegistrationViewController from the storyboard") }
        controller.msgController = self
        
        //if local player store here
        controller.localPlayer =  gameData.value(forKey: "player" + String(localPlayerRegID)) as! PlayerInfo
        
        //store the rest in players
        controller.players[1]=gameData.player1!
        controller.players[2]=gameData.player2!
        controller.players[3]=gameData.player3!
            
        return controller
    }
    
    private func allParticipantsRegistered(_ conversation: MSConversation) -> Bool {
        var result = false
        let otherPlayerCount = conversation.remoteParticipantIdentifiers.count
        print("Found Other Players: \(otherPlayerCount)")
        if (gameData.playerMap!.count >= otherPlayerCount) {
            result = true
        }
        return result
    }


}
